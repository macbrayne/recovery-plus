import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
	id 'maven-publish'
	alias(libs.plugins.quilt.loom)
	alias(libs.plugins.curseforge.gradle)
	alias(libs.plugins.minotaur)
}

archivesBaseName = project.archives_base_name
version = project.version
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	maven {
		name = "Ladysnake Mods"
		url = 'https://maven.ladysnake.org/releases'
	}
}

// All the dependencies are declared at gradle/libs.version.toml and referenced with "libs.<id>"
// See https://docs.gradle.org/current/userguide/platforms.html for information on how version catalogs work.
dependencies {
	minecraft libs.minecraft
	mappings loom.layered {
		mappings "org.quiltmc:quilt-mappings:${libs.versions.quilt.mappings.get()}:intermediary-v2"
		officialMojangMappings()
	}
	modImplementation libs.quilt.loader

	// QSL is not a complete API; You will need Quilted Fabric API to fill in the gaps.
	// Quilted Fabric API will automatically pull in the correct QSL version.
	modImplementation libs.fabric.api
	// modImplementation libs.bundles.quilted.fabric.api // If you wish to use Fabric API's deprecated modules, you can replace the above line with this one
	modImplementation libs.bundles.cardinal.components.api
	include libs.bundles.cardinal.components.api


	testImplementation(platform('org.junit:junit-bom:5.9.0'))
	testImplementation('org.junit.jupiter:junit-jupiter')
}


test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}

processResources {
	inputs.property "version", version

	filesMatching('fabric.mod.json') {
		expand "version": version
	}
}


tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Still required by IDEs such as Eclipse and Visual Studio Code
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
	// Uncomment this line to generate them.
	// withJavadocJar()
}

// If you plan to use a different file for the license, don't forget to change the file name here!
jar {
	from("LICENSE") {
		rename { "${it}_${archivesBaseName}" }
	}
}

// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

tasks.modrinth.onlyIf {
	System.getenv("MODRINTH")
}

modrinth {
	token = System.getenv("MODRINTH") // This is the default. Remember to have the MODRINTH_TOKEN environment variable set or else this will fail, or set it to whatever you want - just make sure it stays private!
	projectId = "DU7GOxKZ" // This can be the project ID or the slug. Either will work!
	changelog = System.getenv("CHANGELOG")
	uploadFile = remapJar // With Loom, this MUST be set to `remapJar` instead of `jar`!
	gameVersions = [libs.versions.minecraft.get()] // Must be an array, even with only one version
	loaders = ["fabric", "quilt"] // Must also be an array - no need to specify this if you're using Loom or ForgeGradle
	dependencies { // A special DSL for creating dependencies
		// scope.type
		// The scope can be `required`, `optional`, `incompatible`, or `embedded`
		// The type can either be `project` or `version`
		required.project "fabric-api" // Creates a new required dependency on Fabric API
	}
}

tasks.register('curseforge', TaskPublishCurseForge) {
	// This token is used to authenticate with CurseForge. It should be handled
	// with the same level of care and security as your actual password. You
	// should never share your token with an untrusted source or publish it
	// publicly to GitHub or embed it within a project. The best practice is to
	// store this token in an environment variable or a build secret.
	apiToken = System.getenv("CURSEFORGE")

	// Tells CurseForgeGradle to publish the output of the jar task. This will
	// return a UploadArtifact object that can be used to further configure the
	// file.
	def mainFile = upload("663861", remapJar)
	mainFile.changelog = System.getenv("CHANGELOG")
	mainFile.changelogType = "markdown"
}
